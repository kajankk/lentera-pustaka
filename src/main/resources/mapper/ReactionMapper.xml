<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.naskah.demo.mapper.ReactionMapper">

    <!-- Result Map -->
    <resultMap id="ReactionResultMap" type="com.naskah.demo.model.entity.Reaction">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="bookId" column="book_id"/>
        <result property="reactionType" column="reaction_type"/>
        <result property="rating" column="rating"/>
        <result property="comment" column="comment"/>
        <result property="title" column="title"/>
        <result property="parentId" column="parent_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- Insert new reaction -->
    <insert id="insertReaction" parameterType="com.naskah.demo.model.entity.Reaction" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO reactions (
        user_id, book_id, reaction_type, rating, comment, title,
        parent_id, created_at, updated_at
        ) VALUES (
        #{userId}, #{bookId}, #{reactionType}, #{rating}, #{comment},
        #{title}, #{parentId}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- Update existing reaction -->
    <update id="updateReaction" parameterType="com.naskah.demo.model.entity.Reaction">
        UPDATE reactions SET
        reaction_type = #{reactionType},
        rating = #{rating},
        comment = #{comment},
        title = #{title},
        updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- Find reaction by ID -->
    <select id="findReactionById" resultMap="ReactionResultMap">
        SELECT * FROM reactions WHERE id = #{reactionId}
    </select>

    <!-- Find main reactions with pagination -->
    <select id="findReactionsByBookIdWithPagination" resultMap="ReactionResultMap">
        SELECT * FROM reactions
        WHERE book_id = #{bookId}
        AND parent_id IS NULL
        AND reaction_type = 'COMMENT'
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- Find rating by user and book -->
    <select id="findRatingByUserAndBook" resultMap="ReactionResultMap">
        SELECT * FROM reactions
        WHERE user_id = #{userId}
        AND book_id = #{bookId}
        AND reaction_type = 'RATING'
        AND parent_id IS NULL
        LIMIT 1
    </select>

    <!-- Find review by user and book -->
    <select id="findReviewByUserAndBook" resultMap="ReactionResultMap">
        SELECT * FROM reactions
        WHERE user_id = #{userId}
        AND book_id = #{bookId}
        AND reaction_type = 'COMMENT'
        AND parent_id IS NULL
        LIMIT 1
    </select>

    <!-- Find feedback by user and review -->
    <select id="findFeedbackByUserAndReview" resultMap="ReactionResultMap">
        SELECT * FROM reactions
        WHERE user_id = #{userId}
        AND parent_id = #{parentId}
        AND reaction_type IN ('HELPFUL', 'NOT_HELPFUL')
        LIMIT 1
    </select>

    <!-- Find replies by parent ID -->
    <select id="findRepliesByParentId" resultMap="ReactionResultMap">
        SELECT * FROM reactions
        WHERE parent_id = #{parentId}
        ORDER BY created_at ASC
    </select>

    <!-- Get reaction statistics for a book -->
    <select id="getReactionStats" resultType="com.naskah.demo.model.dto.response.ReactionStatsResponse">
        SELECT
        COUNT(CASE WHEN reaction_type = 'RATING' THEN 1 END) as totalRatings,
        COUNT(CASE WHEN reaction_type = 'COMMENT' AND parent_id IS NULL THEN 1 END) as totalComments,
        COALESCE(AVG(CASE WHEN reaction_type = 'RATING' THEN rating END), 0.0) as averageRating,
        0 as totalAngry,
        0 as totalLikes,
        0 as totalLoves,
        0 as totalDislikes,
        0 as totalSad
        FROM reactions
        WHERE book_id = #{bookId}
    </select>

    <!-- Get user's reaction type for a specific book -->
    <select id="getUserReactionType" resultType="String">
        SELECT reaction_type FROM reactions
        WHERE user_id = #{userId}
        AND book_id = #{bookId}
        AND parent_id IS NULL
        LIMIT 1
    </select>

    <!-- Delete reaction and all its replies (cascading delete) -->
    <delete id="deleteReactionAndReplies">
        DELETE FROM reactions
        WHERE id = #{reactionId} OR parent_id = #{reactionId}
    </delete>

</mapper>