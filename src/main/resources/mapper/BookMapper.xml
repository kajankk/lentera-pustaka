<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.naskah.demo.mapper.BookMapper">

    <select id="countByTitleAndPublicationYear" resultType="int">
        SELECT COUNT(*) FROM books
        WHERE title = #{title}
        AND publication_year = #{publicationYear}
    </select>

    <insert id="insertBook" parameterType="com.naskah.demo.model.entity.Book" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO books
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title != null">title,</if>
            <if test="slug != null">slug,</if>
            <if test="subtitle != null">subtitle,</if>
            <if test="seriesId != null">series_id,</if>
            <if test="seriesOrder != null">series_order,</if>
            <if test="edition != null">edition,</if>
            <if test="publicationYear != null">publication_year,</if>
            <if test="publisher != null">publisher,</if>
            <if test="languageId != null">language_id,</if>
            <if test="description != null">description,</if>
            <if test="summary != null">summary,</if>
            <if test="coverImageUrl != null">cover_image_url,</if>
            <if test="coverImagePath != null">cover_image_path,</if>
            <if test="fileUrl != null">file_url,</if>
            <if test="filePath != null">file_path,</if>
            <if test="fileFormat != null">file_format,</if>
            <if test="fileSize != null">file_size,</if>
            <if test="totalWord != null">total_word,</if>
            <if test="totalPages != null">total_pages,</if>
            <if test="estimatedReadTime != null">estimated_read_time,</if>
            <if test="difficultyLevel != null">difficulty_level,</if>
            <if test="copyrightStatusId != null">copyright_status_id,</if>
            <if test="viewCount != null">view_count,</if>
            <if test="downloadCount != null">download_count,</if>
            <if test="isFeatured != null">is_featured,</if>
            <if test="isActive != null">is_active,</if>
            <if test="publishedAt != null">published_at,</if>
            <if test="category != null">category,</if>
            created_at,
            updated_at,
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title != null">#{title},</if>
            <if test="slug != null">#{slug},</if>
            <if test="subtitle != null">#{subtitle},</if>
            <if test="seriesId != null">#{seriesId},</if>
            <if test="seriesOrder != null">#{seriesOrder},</if>
            <if test="edition != null">#{edition},</if>
            <if test="publicationYear != null">#{publicationYear},</if>
            <if test="publisher != null">#{publisher},</if>
            <if test="languageId != null">#{languageId},</if>
            <if test="description != null">#{description},</if>
            <if test="summary != null">#{summary},</if>
            <if test="coverImageUrl != null">#{coverImageUrl},</if>
            <if test="coverImagePath != null">#{coverImagePath},</if>
            <if test="fileUrl != null">#{fileUrl},</if>
            <if test="filePath != null">#{filePath},</if>
            <if test="fileFormat != null">#{fileFormat},</if>
            <if test="fileSize != null">#{fileSize},</if>
            <if test="totalWord != null">#{totalWord},</if>
            <if test="totalPages != null">#{totalPages},</if>
            <if test="estimatedReadTime != null">#{estimatedReadTime},</if>
            <if test="difficultyLevel != null">#{difficultyLevel},</if>
            <if test="copyrightStatusId != null">#{copyrightStatusId},</if>
            <if test="viewCount != null">#{viewCount},</if>
            <if test="downloadCount != null">#{downloadCount},</if>
            <if test="isFeatured != null">#{isFeatured},</if>
            <if test="isActive != null">#{isActive},</if>
            <if test="publishedAt != null">#{publishedAt},</if>
            <if test="category != null">#{category},</if>
            #{createdAt},
            #{updatedAt},
        </trim>
    </insert>

    <insert id="insertBookGenre">
        INSERT INTO book_genres (book_id, genre_id)
        VALUES (#{bookId}, #{genreId})
    </insert>

    <insert id="insertBookTag">
        INSERT INTO book_tags (book_id, tag_id)
        VALUES (#{bookId}, #{tagId})
    </insert>

    <insert id="insertBookAuthor">
        INSERT INTO book_authors (book_id, author_id)
        VALUES (#{bookId}, #{authorId})
    </insert>

    <insert id="insertBookContributor">
        INSERT INTO book_contributors (book_id, contributor_id, role_id)
        VALUES (#{bookId}, #{contributorId}, #{roleId})
    </insert>

    <!-- Fixed MyBatis Mapper -->

    <!-- Result Map untuk Book dengan aggregated data -->
    <resultMap id="bookDetailResultMap" type="com.naskah.demo.model.dto.response.BookResponse">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="slug" column="slug"/>
        <result property="edition" column="edition"/>
        <result property="coverImageUrl" column="cover_image_url"/>
        <result property="publisher" column="publisher"/>
        <result property="publicationYear" column="publication_year"/>
        <result property="fileUrl" column="file_url"/>
        <result property="fileFormat" column="file_format"/>
        <result property="fileSize" column="file_size"/>
        <result property="totalPages" column="total_pages"/>
        <result property="description" column="description"/>
        <result property="summary" column="summary"/>
        <result property="estimatedReadTime" column="estimated_read_time"/>
        <result property="language" column="language"/>
        <result property="totalWord" column="total_word"/>
        <result property="difficultyLevel" column="difficulty_level"/>
        <result property="viewCount" column="view_count"/>
        <result property="readCount" column="read_count"/>
        <result property="downloadCount" column="download_count"/>
        <result property="subtitle" column="subtitle"/>
        <result property="seriesId" column="series_id"/>
        <result property="seriesOrder" column="series_order"/>
        <result property="copyrightStatus" column="copyright_status"/>
        <result property="publishedAt" column="published_at"/>
        <result property="category" column="category"/>

        <!-- Aggregated fields as strings -->
        <result property="authorNames" column="author_names"/>
        <result property="authorSlugs" column="author_slugs"/>
        <result property="contributors" column="contributors"/>
        <result property="genres" column="genres"/>

        <!-- Reaction statistics -->
        <result property="totalRatings" column="total_ratings"/>
        <result property="totalAngry" column="total_angry"/>
        <result property="totalLikes" column="total_likes"/>
        <result property="totalLoves" column="total_loves"/>
        <result property="totalDislikes" column="total_dislikes"/>
        <result property="totalSad" column="total_sad"/>
        <result property="totalComments" column="total_comments"/>
        <result property="averageRating" column="average_rating"/>
    </resultMap>

    <!-- Query dengan aggregated data untuk menghindari duplikasi -->
    <select id="getBookDetailBySlug" resultMap="bookDetailResultMap">
        SELECT DISTINCT
        b.id,
        b.title,
        b.slug,
        b.edition,
        b.cover_image_url,
        b.publisher,
        b.publication_year,
        b.file_url,
        b.file_format,
        b.file_size,
        b.total_pages,
        b.description,
        b.summary,
        b.estimated_read_time,
        l.name as language,
        b.total_word,
        b.difficulty_level,
        b.view_count,
        b.read_count,
        b.download_count,
        b.subtitle,
        b.series_id,
        b.series_order,
        cs.name as copyright_status,
        b.published_at,
        b.category,

        -- Aggregate authors into single fields
        (SELECT STRING_AGG(a.name, ', ')
        FROM book_authors ba
        JOIN authors a ON ba.author_id = a.id
        WHERE ba.book_id = b.id) as author_names,

        (SELECT STRING_AGG(a.slug, ', ')
        FROM book_authors ba
        JOIN authors a ON ba.author_id = a.id
        WHERE ba.book_id = b.id) as author_slugs,

        -- Aggregate contributors into single fields
        (SELECT STRING_AGG(c.name || ' (' || bc.role || ')', ', ')
        FROM book_contributors bc
        JOIN contributors c ON bc.contributor_id = c.id
        WHERE bc.book_id = b.id) as contributors,

        -- Aggregate genres into single fields
        (SELECT STRING_AGG(g.name, ', ')
        FROM book_genres bg
        JOIN genres g ON bg.genre_id = g.id
        WHERE bg.book_id = b.id) as genres,

        -- Reaction statistics
        COALESCE(rs.total_ratings, 0) as total_ratings,
        COALESCE(rs.total_angry, 0) as total_angry,
        COALESCE(rs.total_likes, 0) as total_likes,
        COALESCE(rs.total_loves, 0) as total_loves,
        COALESCE(rs.total_dislikes, 0) as total_dislikes,
        COALESCE(rs.total_sad, 0) as total_sad,
        COALESCE(rs.total_comments, 0) as total_comments,
        COALESCE(rs.average_rating, 0.0) as average_rating

        FROM books b
        JOIN languages l ON b.language_id = l.id
        JOIN copyright_statuses cs ON b.copyright_status_id = cs.id
        LEFT JOIN (
        SELECT
        book_id,
        COUNT(CASE WHEN UPPER(reaction_type) = 'RATING' THEN 1 END) as total_ratings,
        COUNT(CASE WHEN UPPER(reaction_type) = 'ANGRY' THEN 1 END) as total_angry,
        COUNT(CASE WHEN UPPER(reaction_type) = 'LIKE' THEN 1 END) as total_likes,
        COUNT(CASE WHEN UPPER(reaction_type) = 'LOVE' THEN 1 END) as total_loves,
        COUNT(CASE WHEN UPPER(reaction_type) = 'DISLIKE' THEN 1 END) as total_dislikes,
        COUNT(CASE WHEN UPPER(reaction_type) = 'SAD' THEN 1 END) as total_sad,
        COUNT(CASE WHEN comment IS NOT NULL THEN 1 END) as total_comments,
        AVG(CASE WHEN rating IS NOT NULL THEN rating END) as average_rating
        FROM reactions
        GROUP BY book_id
        ) rs ON b.id = rs.book_id
        WHERE b.slug = #{slug}
    </select>

    <select id="getBookListWithFilters" resultMap="bookDetailResultMap">
        SELECT DISTINCT
        b.id,
        b.title,
        b.slug,
        b.edition,
        b.cover_image_url,
        b.publisher,
        b.publication_year,
        b.file_url,
        b.file_format,
        b.file_size,
        b.total_pages,
        b.description,
        b.summary,
        b.estimated_read_time,
        l.name as language,
        b.total_word,
        b.difficulty_level,
        b.view_count,
        b.read_count,
        b.download_count,
        b.subtitle,
        b.series_id,
        b.series_order,
        cs.name as copyright_status,
        b.published_at,
        b.category,

        -- Aggregate authors
        (SELECT STRING_AGG(a.name, ', ')
        FROM book_authors ba
        JOIN authors a ON ba.author_id = a.id
        WHERE ba.book_id = b.id) as author_names,

        (SELECT STRING_AGG(a.slug, ', ')
        FROM book_authors ba
        JOIN authors a ON ba.author_id = a.id
        WHERE ba.book_id = b.id) as author_slugs,

        -- Aggregate contributors
        (SELECT STRING_AGG(c.name || ' (' || bc.role || ')', ', ')
        FROM book_contributors bc
        JOIN contributors c ON bc.contributor_id = c.id
        WHERE bc.book_id = b.id) as contributors,

        -- Aggregate genres
        (SELECT STRING_AGG(g.name, ', ')
        FROM book_genres bg
        JOIN genres g ON bg.genre_id = g.id
        WHERE bg.book_id = b.id) as genres,

        -- Reaction statistics
        COALESCE(rs.total_ratings, 0) as total_ratings,
        COALESCE(rs.total_angry, 0) as total_angry,
        COALESCE(rs.total_likes, 0) as total_likes,
        COALESCE(rs.total_loves, 0) as total_loves,
        COALESCE(rs.total_dislikes, 0) as total_dislikes,
        COALESCE(rs.total_sad, 0) as total_sad,
        COALESCE(rs.total_comments, 0) as total_comments,
        COALESCE(rs.average_rating, 0.0) as average_rating

        FROM books b
        JOIN languages l ON b.language_id = l.id
        JOIN copyright_statuses cs ON b.copyright_status_id = cs.id
        LEFT JOIN (
        SELECT
        book_id,
        COUNT(CASE WHEN UPPER(reaction_type) = 'RATING' THEN 1 END) as total_ratings,
        COUNT(CASE WHEN UPPER(reaction_type) = 'ANGRY' THEN 1 END) as total_angry,
        COUNT(CASE WHEN UPPER(reaction_type) = 'LIKE' THEN 1 END) as total_likes,
        COUNT(CASE WHEN UPPER(reaction_type) = 'LOVE' THEN 1 END) as total_loves,
        COUNT(CASE WHEN UPPER(reaction_type) = 'DISLIKE' THEN 1 END) as total_dislikes,
        COUNT(CASE WHEN UPPER(reaction_type) = 'SAD' THEN 1 END) as total_sad,
        COUNT(CASE WHEN comment IS NOT NULL THEN 1 END) as total_comments,
        AVG(CASE WHEN rating IS NOT NULL THEN rating END) as average_rating
        FROM reactions
        GROUP BY book_id
        ) rs ON b.id = rs.book_id
        <where>
            <if test="searchTitle != null and searchTitle != ''">
                AND LOWER(b.title) LIKE CONCAT('%', LOWER(#{searchTitle}), '%')
            </if>
            <if test="seriesId != null">
                AND b.series_id = #{seriesId}
            </if>
            <if test="genreId != null">
                AND EXISTS (
                SELECT 1 FROM book_genres bg2
                WHERE bg2.book_id = b.id AND bg2.genre_id = #{genreId}
                )
            </if>
            <if test="subGenreId != null">
                AND EXISTS (
                SELECT 1 FROM book_genres bg3
                JOIN genres g3 ON bg3.genre_id = g3.id
                WHERE bg3.book_id = b.id AND g3.parent_genre_id = #{subGenreId}
                )
            </if>
        </where>
        ORDER BY b.id,
        <choose>
            <when test="sortColumn == 'PUBLISHED_AT'">
                b.published_at ${sortType}
            </when>
            <when test="sortColumn == 'ESTIMATED_READ_TIME'">
                b.estimated_read_time ${sortType}
            </when>
            <when test="sortColumn == 'TOTAL_WORD'">
                b.total_word ${sortType}
            </when>
            <when test="sortColumn == 'AVERAGE_RATING'">
                rs.average_rating ${sortType}
            </when>
            <when test="sortColumn == 'VIEW_COUNT'">
                b.view_count ${sortType}
            </when>
            <otherwise>
                b.title ${sortType}
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="findBookBySlug" resultType="com.naskah.demo.model.entity.Book">
        SELECT *
        FROM books
        WHERE slug = #{slug}
    </select>

    <!-- Fixed increment read count method -->
    <update id="incrementReadCount">
        UPDATE books
        SET read_count = read_count + 1
        WHERE id = #{bookId}
    </update>

    <!-- Fixed getDetailEbook method with Long parameter -->
    <select id="getDetailEbook" resultType="com.naskah.demo.model.entity.Book">
        SELECT
        id, title, slug, subtitle, series_id, series_order, edition,
        publication_year, publisher, language_id, description, summary,
        cover_image_url, cover_image_path, file_url, file_path,
        file_format, file_size, total_word, total_pages, estimated_read_time,
        difficulty_level, copyright_status_id, view_count, read_count,
        download_count, average_rating, total_reviews, is_featured,
        is_active, published_at, category, created_at, updated_at
        FROM books
        WHERE id = #{id}
    </select>

    <!-- Fixed updateEbook method -->
    <update id="updateEbook" parameterType="com.naskah.demo.model.entity.Book">
        UPDATE books
        SET
        <trim suffixOverrides=",">
            <if test="title != null">title = #{title},</if>
            <if test="slug != null">slug = #{slug},</if>
            <if test="subtitle != null">subtitle = #{subtitle},</if>
            <if test="seriesId != null">series_id = #{seriesId},</if>
            <if test="seriesOrder != null">series_order = #{seriesOrder},</if>
            <if test="edition != null">edition = #{edition},</if>
            <if test="publicationYear != null">publication_year = #{publicationYear},</if>
            <if test="publisher != null">publisher = #{publisher},</if>
            <if test="languageId != null">language_id = #{languageId},</if>
            <if test="description != null">description = #{description},</if>
            <if test="summary != null">summary = #{summary},</if>
            <if test="coverImageUrl != null">cover_image_url = #{coverImageUrl},</if>
            <if test="coverImagePath != null">cover_image_path = #{coverImagePath},</if>
            <if test="fileUrl != null">file_url = #{fileUrl},</if>
            <if test="filePath != null">file_path = #{filePath},</if>
            <if test="fileFormat != null">file_format = #{fileFormat},</if>
            <if test="fileSize != null">file_size = #{fileSize},</if>
            <if test="totalWord != null">total_word = #{totalWord},</if>
            <if test="totalPages != null">total_pages = #{totalPages},</if>
            <if test="estimatedReadTime != null">estimated_read_time = #{estimatedReadTime},</if>
            <if test="difficultyLevel != null">difficulty_level = #{difficultyLevel},</if>
            <if test="copyrightStatusId != null">copyright_status_id = #{copyrightStatusId},</if>
            <if test="viewCount != null">view_count = #{viewCount},</if>
            <if test="readCount != null">read_count = #{readCount},</if>
            <if test="downloadCount != null">download_count = #{downloadCount},</if>
            <if test="isFeatured != null">is_featured = #{isFeatured},</if>
            <if test="isActive != null">is_active = #{isActive},</if>
            <if test="publishedAt != null">published_at = #{publishedAt},</if>
            <if test="category != null">category = #{category},</if>
            updated_at = CURRENT_TIMESTAMP,
        </trim>
        WHERE id = #{id}
    </update>

    <!-- Fixed deleteEbook method -->
    <delete id="deleteEbook">
        DELETE FROM books
        WHERE id = #{id}
    </delete>

    <!-- Additional updateBook method (more comprehensive) -->
    <update id="updateBook" parameterType="com.naskah.demo.model.entity.Book">
        UPDATE books
        SET
        <trim suffixOverrides=",">
            <if test="title != null">title = #{title},</if>
            <if test="slug != null">slug = #{slug},</if>
            <if test="subtitle != null">subtitle = #{subtitle},</if>
            <if test="seriesId != null">series_id = #{seriesId},</if>
            <if test="seriesOrder != null">series_order = #{seriesOrder},</if>
            <if test="edition != null">edition = #{edition},</if>
            <if test="publicationYear != null">publication_year = #{publicationYear},</if>
            <if test="publisher != null">publisher = #{publisher},</if>
            <if test="languageId != null">language_id = #{languageId},</if>
            <if test="description != null">description = #{description},</if>
            <if test="summary != null">summary = #{summary},</if>
            <if test="coverImageUrl != null">cover_image_url = #{coverImageUrl},</if>
            <if test="coverImagePath != null">cover_image_path = #{coverImagePath},</if>
            <if test="fileUrl != null">file_url = #{fileUrl},</if>
            <if test="filePath != null">file_path = #{filePath},</if>
            <if test="fileFormat != null">file_format = #{fileFormat},</if>
            <if test="fileSize != null">file_size = #{fileSize},</if>
            <if test="totalWord != null">total_word = #{totalWord},</if>
            <if test="totalPages != null">total_pages = #{totalPages},</if>
            <if test="estimatedReadTime != null">estimated_read_time = #{estimatedReadTime},</if>
            <if test="difficultyLevel != null">difficulty_level = #{difficultyLevel},</if>
            <if test="copyrightStatusId != null">copyright_status_id = #{copyrightStatusId},</if>
            <if test="viewCount != null">view_count = #{viewCount},</if>
            <if test="readCount != null">read_count = #{readCount},</if>
            <if test="downloadCount != null">download_count = #{downloadCount},</if>
            <if test="isFeatured != null">is_featured = #{isFeatured},</if>
            <if test="isActive != null">is_active = #{isActive},</if>
            <if test="publishedAt != null">published_at = #{publishedAt},</if>
            <if test="category != null">category = #{category},</if>
            updated_at = CURRENT_TIMESTAMP,
        </trim>
        WHERE id = #{id}
    </update>

    <!-- Additional deleteBook method -->
    <delete id="deleteBook">
        DELETE FROM books
        WHERE id = #{id}
    </delete>

</mapper>